AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Serverless API for Kashish Ecommerce platform

# Configure global properties for resources.
Globals:
  # Globals for AWS::Serverless::Function types
  Function:
    Timeout: 35
    MemorySize: 1024
    
  # Globals for AWS::Serverless::HttpApi types
  HttpApi: 
    Auth:
      EnableIamAuthorizer: true
      DefaultAuthorizer: AWS_IAM

# This represents the parts of our app. i.e. the lambda function and database tables.
Resources:
  # Lambda config
  ShopApi:
    Type: AWS::Serverless::Function
    Properties:
      Description: API To manage Kashish Shop actions
      CodeUri: ./src/ShopRepository/
      Handler: ShopRepository
      Runtime: dotnet8

      Policies: # App permissions. Specifically giving our function permission to access AWS resources.
        - DynamoDBCrudPolicy:
            TableName: !Ref customerTable
        - DynamoDBCrudPolicy:
            TableName: !Ref orderTable
        - DynamoDBCrudPolicy:
            TableName: !Ref stockTable
        - DynamoDBCrudPolicy:
            TableName: !Ref stockRequestsTable
        - Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: "arn:aws:secretsmanager:ap-southeast-2:603012407640:secret:KashishWebAppConfigSecrets-9qY89s"
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
                - s3:ListBucket
              Resource: "arn:aws:s3:::kashish-web-asset-bucket/*"
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminUpdateUserAttributes
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminAddUserToGroup
              Resource: "arn:aws:cognito-idp:ap-southeast-2:603012407640:userpool/ap-southeast-2_RXmB1ATp1"

      Environment:
        Variables:
          ORDER_TABLE: !Ref orderTable
          CUSTOMER_TABLE: !Ref customerTable
          STOCK_TABLE: !Ref stockTable
          STOCK_REQUEST_TABLE: !Ref stockRequestsTable
          
          LOCAL_DB: http://host.docker.internal:8000

      Events: # Events are what calls the function. In this case we generate an AWS HttpApi gateway. 
        RootApiGateway:
          Type: HttpApi
          Properties:
            Path: /{path+} # What endpoints this API is mapped too. {path+} maps all endpoints in our application.
            Method: ANY

  # Database config.
  customerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "Customers"
      
      # At least for testing we shouldn't provision excess capacity
      BillingMode: "PAY_PER_REQUEST"
      
      # All attributes that will be used for keying
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
        - AttributeName: "Email"
          AttributeType: "S"
        - AttributeName: "StripeId"
          AttributeType: "S"
      
      # Primary Key Definition: 
      KeySchema:
        - AttributeName: "Id"
          KeyType: "HASH"
      
      # Indexes so we can key on other items (lets us query instead of scanning on these attributes)
      GlobalSecondaryIndexes:
        - IndexName: "CustomerEmailIndex"
          KeySchema:
            - AttributeName: "Email"
              KeyType: "HASH"
          Projection:
            ProjectionType: "KEYS_ONLY"
            
        - IndexName: "CustomerStripeIndex"
          KeySchema:
            - AttributeName: "StripeId"
              KeyType: "HASH"
          Projection: 
            ProjectionType: "KEYS_ONLY"
               
  
  orderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "Orders"
      
      BillingMode: "PAY_PER_REQUEST"
      
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
        - AttributeName: "CustomerId"
          AttributeType: "S"
        - AttributeName: "StripeCheckoutSession"
          AttributeType: "S"
          
      KeySchema:
        - AttributeName: "Id"
          KeyType: "HASH"

      GlobalSecondaryIndexes:
        - IndexName: "OrderCustomerIndex"
          KeySchema:
            - AttributeName: "CustomerId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "KEYS_ONLY"
    
        - IndexName: "OrderStripeIndex"
          KeySchema:
            - AttributeName: "StripeCheckoutSession"
              KeyType: "HASH"
          Projection:
            ProjectionType: "KEYS_ONLY"        

  stockTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "Stock"
      
      BillingMode: "PAY_PER_REQUEST"
      
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
        - AttributeName: "StripeId"
          AttributeType: "S"
          
      KeySchema:
        - AttributeName: "Id"
          KeyType: "HASH"

      GlobalSecondaryIndexes:
        - IndexName: "StockStripeIndex"
          KeySchema:
            - AttributeName: "StripeId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "KEYS_ONLY"
  
  stockRequestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "StockRequests"
      
      BillingMode: "PAY_PER_REQUEST"
      
      AttributeDefinitions:
        - AttributeName: "OrderId"
          AttributeType: "S"
        - AttributeName: "ProductId"
          AttributeType: "S"
      
      KeySchema:
        - AttributeName: "OrderId"
          KeyType: "HASH"
        - AttributeName: "ProductId"
          KeyType: "RANGE"

# Information to output into the AWS stack in cloudformation. In this case we output the endpoint of our shop api for easy access.
Outputs:
  ShopApiEndpoint:
    Description: "Shop API Gateway Endpoint URL"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
